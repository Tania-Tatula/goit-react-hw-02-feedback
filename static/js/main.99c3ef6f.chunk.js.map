{"version":3,"sources":["components/Feedback/Feedback.module.css","components/Feedback/Statistics.js","components/Feedback/FeedbackOptions.js","components/Feedback/Notification.js","components/Feedback/Feedback.js","App.js","index.js"],"names":["module","exports","Notification","propTypes","good","PropTypes","number","isRequired","bad","neutral","total","func","positivePercentage","Statistics","className","styles","title","info","FeedbackOptions","options","onLeaveFeedback","map","option","button","type","name","onClick","shortid","generate","message","Feedback","state","evt","target","setState","prevState","this","countTotalFeedback","toFixed","objKey","Object","keys","feedbackBlock","countPositiveFeedbackPercentage","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,MAAQ,wBAAwB,OAAS,yBAAyB,KAAO,yB,+MCe3IC,aAAaC,UAAY,CACvBC,KAAMC,IAAUC,OAAOC,WACvBC,IAAKH,IAAUC,OAAOC,WACtBE,QAASJ,IAAUC,OAAOC,WAC1BG,MAAOL,IAAUM,KAAKJ,WACtBK,mBAAoBP,IAAUM,KAAKJ,YAGtBM,MAnBI,SAAC,GAAD,IAAGT,EAAH,EAAGA,KAAMK,EAAT,EAASA,QAASD,EAAlB,EAAkBA,IAAKE,EAAvB,EAAuBA,MAAOE,EAA9B,EAA8BA,mBAA9B,OACjB,qCACE,oBAAIE,UAAWC,IAAOC,MAAtB,wBACA,uBAAMF,UAAWC,IAAOE,KAAxB,kBAAoCb,KACpC,uBAAMU,UAAWC,IAAOE,KAAxB,qBAAuCR,KACvC,uBAAMK,UAAWC,IAAOE,KAAxB,iBAAmCT,KACnC,uBAAMM,UAAWC,IAAOE,KAAxB,mBAAqCP,KACrC,uBAAMI,UAAWC,IAAOE,KAAxB,+BAAiDL,EAAjD,W,iBCcWM,EArBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBACER,UAAWC,IAAOQ,OAElBC,KAAK,SACLC,KAAMH,EACNI,QAASN,EALX,SAOGE,GALIK,IAAQC,kBCKN1B,EAVM,SAAC,GAAD,IAAG2B,EAAH,EAAGA,QAAH,OACnB,mCACE,oBAAIf,UAAWC,IAAOC,MAAtB,SAA8Ba,OCuEnBC,E,4MAvEbC,MAAQ,CACN3B,KAAM,EACNK,QAAS,EACTD,IAAK,G,EA8BPY,gBAAkB,SAACY,GACjB,IAAMP,EAAOO,EAAIC,OAAOR,KACxB,EAAKS,UAAS,SAACC,GAAD,sBACXV,EAAOU,EAAUV,GAAQ,O,wDAd9B,WAEE,OADYW,KAAKL,MAAM3B,KAAOgC,KAAKL,MAAMtB,QAAU2B,KAAKL,MAAMvB,M,6CAIhE,WACE,IAAIE,EAAQ0B,KAAKC,qBAEjB,OAD2C,IAAlBD,KAAKL,MAAM3B,KAAcM,GAAO4B,Y,oBAW3D,WACE,IAAMC,EAASC,OAAOC,KAAKL,KAAKL,OAEhC,OACE,sBAAKjB,UAAWC,IAAO2B,cAAvB,UACE,oBAAI5B,UAAWC,IAAOC,MAAtB,mCAEA,cAAC,EAAD,CACEG,QAASoB,EACTnB,gBAAiBgB,KAAKhB,kBAMO,IAA9BgB,KAAKC,qBACJ,cAAC,EAAD,CAAcR,QAAQ,sBAEtB,cAAC,EAAD,CACEzB,KAAMgC,KAAKL,MAAM3B,KACjBK,QAAS2B,KAAKL,MAAMtB,QACpBD,IAAK4B,KAAKL,MAAMvB,IAChBE,MAAO0B,KAAKC,qBACZzB,mBAAoBwB,KAAKO,2C,GAhEdC,aCKRC,MARf,WACE,OACE,qBAAK/B,UAAU,MAAf,SACE,cAAC,EAAD,OCDNgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.99c3ef6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackBlock\":\"Feedback_feedbackBlock__qgn_k\",\"title\":\"Feedback_title__11yKQ\",\"button\":\"Feedback_button__3OZ33\",\"info\":\"Feedback_info__2tFs4\"};","import React from \"react\";\r\nimport styles from \"./Feedback.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    <h2 className={styles.title}>Statistics</h2>\r\n    <span className={styles.info}>Good:{good}</span>\r\n    <span className={styles.info}>Neutral:{neutral}</span>\r\n    <span className={styles.info}>Bad:{bad}</span>\r\n    <span className={styles.info}>Total:{total}</span>\r\n    <span className={styles.info}>Positive feedback:{positivePercentage}%</span>\r\n  </>\r\n);\r\n\r\nNotification.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  total: PropTypes.func.isRequired,\r\n  positivePercentage: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport styles from \"./Feedback.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport shortid from \"shortid\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    {options.map((option) => (\r\n      <button\r\n        className={styles.button}\r\n        key={shortid.generate()}\r\n        type='button'\r\n        name={option}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport styles from \"./Feedback.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Notification = ({ message }) => (\r\n  <>\r\n    <h2 className={styles.title}>{message}</h2>\r\n  </>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./Feedback.module.css\";\r\nimport Statistics from \"./Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport Notification from \"./Notification\";\r\n\r\nclass Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  // handleGoodFeedback = () => {\r\n  //   this.setState((prevState) => ({\r\n  //     good: prevState.good + 1,\r\n  //   }));\r\n  // };\r\n  // handleNeutralFeedback = () => {\r\n  //   this.setState((prevState) => ({\r\n  //     neutral: prevState.neutral + 1,\r\n  //   }));\r\n  // };\r\n  // handleBadFeedback = () => {\r\n  //   this.setState((prevState) => ({\r\n  //     bad: prevState.bad + 1,\r\n  //   }));\r\n  // };\r\n\r\n  countTotalFeedback() {\r\n    let total = this.state.good + this.state.neutral + this.state.bad;\r\n    return total;\r\n  }\r\n\r\n  countPositiveFeedbackPercentage() {\r\n    let total = this.countTotalFeedback();\r\n    let positiveFeedback = ((this.state.good * 100) / total).toFixed();\r\n    return positiveFeedback;\r\n  }\r\n\r\n  onLeaveFeedback = (evt) => {\r\n    const name = evt.target.name;\r\n    this.setState((prevState) => ({\r\n      [name]: prevState[name] + 1,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const objKey = Object.keys(this.state);\r\n\r\n    return (\r\n      <div className={styles.feedbackBlock}>\r\n        <h1 className={styles.title}>Please leave feedback</h1>\r\n\r\n        <FeedbackOptions\r\n          options={objKey}\r\n          onLeaveFeedback={this.onLeaveFeedback}\r\n          // handleGoodFeedback={this.handleGoodFeedback}\r\n          // handleNeutralFeedback={this.handleNeutralFeedback}\r\n          // handleBadFeedback={this.handleBadFeedback}\r\n        />\r\n\r\n        {this.countTotalFeedback() === 0 ? (\r\n          <Notification message='No feedback given' />\r\n        ) : (\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            total={this.countTotalFeedback()}\r\n            positivePercentage={this.countPositiveFeedbackPercentage()}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import \"./App.css\";\nimport Feedback from \"./components/Feedback\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}